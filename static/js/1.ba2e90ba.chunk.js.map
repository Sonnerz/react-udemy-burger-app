{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.css","components/Order/CheckoutSummary/CheckoutSummary.css","containers/Checkout/ContactData/ContactData.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_css__WEBPACK_IMPORTED_MODULE_1__","_Input_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","console","log","ingredients","react_default","style","width","margin","Burger","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","country","email","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","_this","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","defineProperty","setState","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","Redirect","to","purchasedRedirect","purchased","CheckoutSummary_CheckoutSummary","Route","path","match","component"],"mappings":"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","file":"static/js/1.ba2e90ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n                <select\r\n                    className={inputClasses.join(' ')}\r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            );\r\n            break;\r\n        default:\r\n            inputElement = <input\r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig}\r\n                value={props.value}\r\n                onChange={props.changed} />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.Label}>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input__Input__1VROp\",\"Label\":\"Input__Label__1tOSX\",\"InputElement\":\"Input__InputElement__3TB0k\",\"Invalid\":\"Input__Invalid__38X2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary__CheckoutSummary__-avOx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData__ContactData__1whvJ\",\"Input\":\"ContactData__Input__2uU-e\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.css'\r\n\r\nconst checkoutSummary = (props) => {\r\n    console.log(\"props.ingredients:::::\", props.ingredients);\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>WE hope its good</h1>\r\n            <div style={{ width: '100%', margin: 'auto' }}>\r\n                <Burger ingredients={props.ingredients} />\r\n\r\n            </div>\r\n            <Button\r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button\r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINEUE</Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n    }\r\n\r\n\r\n    //inputIdentifier: name, street, etc\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        //console.log(event.target.value);\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input\r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        value={formElement.config.value}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if (this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    \r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }\r\n\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n\r\n        if (this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}